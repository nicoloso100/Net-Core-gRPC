// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/tickets.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tickets {
  public static partial class Tickets
  {
    static readonly string __ServiceName = "tickets.Tickets";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Tickets.TicketRequestId> __Marshaller_tickets_TicketRequestId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.TicketRequestId.Parser));
    static readonly grpc::Marshaller<global::Tickets.TicketReply> __Marshaller_tickets_TicketReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.TicketReply.Parser));
    static readonly grpc::Marshaller<global::Tickets.AllTicketsRequest> __Marshaller_tickets_AllTicketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.AllTicketsRequest.Parser));
    static readonly grpc::Marshaller<global::Tickets.TicketsReply> __Marshaller_tickets_TicketsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.TicketsReply.Parser));
    static readonly grpc::Marshaller<global::Tickets.AddTicketRequest> __Marshaller_tickets_AddTicketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.AddTicketRequest.Parser));
    static readonly grpc::Marshaller<global::Tickets.EditTicketRequest> __Marshaller_tickets_EditTicketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tickets.EditTicketRequest.Parser));

    static readonly grpc::Method<global::Tickets.TicketRequestId, global::Tickets.TicketReply> __Method_GetTicket = new grpc::Method<global::Tickets.TicketRequestId, global::Tickets.TicketReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTicket",
        __Marshaller_tickets_TicketRequestId,
        __Marshaller_tickets_TicketReply);

    static readonly grpc::Method<global::Tickets.AllTicketsRequest, global::Tickets.TicketsReply> __Method_GetAllTickets = new grpc::Method<global::Tickets.AllTicketsRequest, global::Tickets.TicketsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTickets",
        __Marshaller_tickets_AllTicketsRequest,
        __Marshaller_tickets_TicketsReply);

    static readonly grpc::Method<global::Tickets.AddTicketRequest, global::Tickets.TicketReply> __Method_AddTicket = new grpc::Method<global::Tickets.AddTicketRequest, global::Tickets.TicketReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTicket",
        __Marshaller_tickets_AddTicketRequest,
        __Marshaller_tickets_TicketReply);

    static readonly grpc::Method<global::Tickets.TicketRequestId, global::Tickets.TicketRequestId> __Method_DeleteTicket = new grpc::Method<global::Tickets.TicketRequestId, global::Tickets.TicketRequestId>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTicket",
        __Marshaller_tickets_TicketRequestId,
        __Marshaller_tickets_TicketRequestId);

    static readonly grpc::Method<global::Tickets.EditTicketRequest, global::Tickets.TicketReply> __Method_EditTicket = new grpc::Method<global::Tickets.EditTicketRequest, global::Tickets.TicketReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditTicket",
        __Marshaller_tickets_EditTicketRequest,
        __Marshaller_tickets_TicketReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tickets.TicketsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Tickets</summary>
    [grpc::BindServiceMethod(typeof(Tickets), "BindService")]
    public abstract partial class TicketsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tickets.TicketReply> GetTicket(global::Tickets.TicketRequestId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tickets.TicketsReply> GetAllTickets(global::Tickets.AllTicketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tickets.TicketReply> AddTicket(global::Tickets.AddTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tickets.TicketRequestId> DeleteTicket(global::Tickets.TicketRequestId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tickets.TicketReply> EditTicket(global::Tickets.EditTicketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TicketsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTicket, serviceImpl.GetTicket)
          .AddMethod(__Method_GetAllTickets, serviceImpl.GetAllTickets)
          .AddMethod(__Method_AddTicket, serviceImpl.AddTicket)
          .AddMethod(__Method_DeleteTicket, serviceImpl.DeleteTicket)
          .AddMethod(__Method_EditTicket, serviceImpl.EditTicket).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TicketsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tickets.TicketRequestId, global::Tickets.TicketReply>(serviceImpl.GetTicket));
      serviceBinder.AddMethod(__Method_GetAllTickets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tickets.AllTicketsRequest, global::Tickets.TicketsReply>(serviceImpl.GetAllTickets));
      serviceBinder.AddMethod(__Method_AddTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tickets.AddTicketRequest, global::Tickets.TicketReply>(serviceImpl.AddTicket));
      serviceBinder.AddMethod(__Method_DeleteTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tickets.TicketRequestId, global::Tickets.TicketRequestId>(serviceImpl.DeleteTicket));
      serviceBinder.AddMethod(__Method_EditTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tickets.EditTicketRequest, global::Tickets.TicketReply>(serviceImpl.EditTicket));
    }

  }
}
#endregion
